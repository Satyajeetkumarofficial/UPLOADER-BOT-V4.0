# plugins/movieinfo.py
import requests
import logging
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.enums import ParseMode
from plugins.config import Config

logger = logging.getLogger("plugins.movieinfo")

TMDB_API_KEY = Config.TMDB_API_KEY
BASE_URL = "https://api.themoviedb.org/3"

def get_poster_url(movie_id):
    try:
        url = f"{BASE_URL}/movie/{movie_id}/images?api_key={TMDB_API_KEY}&include_image_language=hi,en,null"
        resp = requests.get(url, timeout=10).json()
        posters = resp.get("posters", [])
        backdrops = resp.get("backdrops", [])
        if posters:
            return f"https://image.tmdb.org/t/p/original{posters[0]['file_path']}"
        if backdrops:
            return f"https://image.tmdb.org/t/p/original{backdrops[0]['file_path']}"
        return None
    except Exception as e:
        logger.error(f"❌ Poster fetch error: {e}")
        return None

@Client.on_message(filters.command("movieinfo") & filters.user(Config.OWNER_ID))
async def movieinfo_command(client: Client, message: Message):
    if len(message.command) < 2:
        await message.reply_text("❌ Usage: /movieinfo <movie name> [year]")
        return

    if message.command[-1].isdigit() and len(message.command[-1]) == 4:
        year = message.command[-1]
        name = " ".join(message.command[1:-1])
    else:
        year = None
        name = " ".join(message.command[1:])

    logger.info(f"🔎 Searching movieinfo for: {name} ({year or ''})")

    search_url = f"{BASE_URL}/search/movie?api_key={TMDB_API_KEY}&query={name}"
    if year:
        search_url += f"&year={year}"

    resp = requests.get(search_url, timeout=10).json()
    results = resp.get("results", [])
    if not results:
        await message.reply_text(f"❌ No results found for {name} ({year or ''})")
        return

    movie = results[0]
    movie_id = movie["id"]

    details_url = f"{BASE_URL}/movie/{movie_id}?api_key={TMDB_API_KEY}&language=en-US"
    details = requests.get(details_url, timeout=10).json()

    credits_url = f"{BASE_URL}/movie/{movie_id}/credits?api_key={TMDB_API_KEY}&language=en-US"
    credits = requests.get(credits_url, timeout=10).json()

    cast = credits.get("cast", [])
    crew = credits.get("crew", [])
    top_actors = ", ".join([actor["name"] for actor in cast[:5]]) or "N/A"
    directors = [m["name"] for m in crew if m.get("job") == "Director"]
    director_names = ", ".join(directors) if directors else "N/A"

    title = details.get("title")
    release_date = details.get("release_date", "N/A")
    overview = details.get("overview", "No description available.")
    genres = ", ".join([g["name"] for g in details.get("genres", [])]) or "N/A"
    language = details.get("original_language", "N/A").upper()
    runtime = details.get("runtime", "N/A")

    poster_url = get_poster_url(movie_id)

    caption = (
        f"🎬 <b>{title}</b>\n\n"
        f"🗓 Release Date: {release_date}\n"
        f"⏱ Runtime: {runtime} min\n"
        f"🌐 Language: {language}\n"
        f"🎭 Genres: {genres}\n"
        f"🎬 Director: {director_names}\n"
        f"⭐ Cast: {top_actors}\n\n"
        f"📝 {overview}\n"
    )

    if poster_url:
        await message.reply_photo(poster_url, caption=caption, parse_mode=ParseMode.HTML)
    else:
        await message.reply_text(caption, parse_mode=ParseMode.HTML)

    logger.info(f"✅ Sent movieinfo for {title}")
