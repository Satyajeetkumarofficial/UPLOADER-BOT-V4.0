import logging
import requests
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from plugins.config import Config
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.enums import ParseMode

logger = logging.getLogger("plugins.autopost")

TMDB_API_KEY = Config.TMDB_API_KEY
FILE_CHANNEL = Config.FILE_CHANNEL

BASE_URL = "https://api.themoviedb.org/3"

# ‚úÖ Poster fetch helper
def get_poster_url(movie_id):
    try:
        url = f"{BASE_URL}/movie/{movie_id}/images?api_key={TMDB_API_KEY}&include_image_language=hi,en,null"
        resp = requests.get(url, timeout=10).json()
        backdrops = resp.get("backdrops", [])
        posters = resp.get("posters", [])

        # Hindi backdrop first
        for b in backdrops:
            if b.get("iso_639_1") == "hi":
                return f"https://image.tmdb.org/t/p/original{b['file_path']}"

        # English backdrop
        for b in backdrops:
            if b.get("iso_639_1") == "en":
                return f"https://image.tmdb.org/t/p/original{b['file_path']}"

        # Any poster
        if posters:
            return f"https://image.tmdb.org/t/p/original{posters[0]['file_path']}"

        # Any scene as fallback
        if backdrops:
            return f"https://image.tmdb.org/t/p/original{backdrops[0]['file_path']}"

        return None
    except Exception as e:
        logger.error(f"‚ùå Error fetching poster: {e}")
        return None

# ‚úÖ Send movie post
async def send_movie_post(app, movie, poster_url, tag):
    title = movie.get("title") or movie.get("name")
    release_date = movie.get("release_date") or movie.get("first_air_date") or "N/A"
    year = release_date.split("-")[0] if release_date else "N/A"
    overview = movie.get("overview", "No description available.")

    caption = (
        f"üé¨ <b>{title}</b> ({year})\n\n"
        f"üóì Release Date: {release_date}\n"
        f"üè∑ Status: {tag}\n\n"
        f"üìù {overview}\n\n"
        f"Generated By : @UrlProUploaderBot"
    )

    try:
        if poster_url:
            await app.send_photo(FILE_CHANNEL, photo=poster_url, caption=caption, parse_mode=ParseMode.HTML)
        else:
            await app.send_message(FILE_CHANNEL, caption, parse_mode=ParseMode.HTML)

        logger.info(f"‚úÖ Posted: {title} ({tag})")
    except Exception as e:
        logger.error(f"‚ùå Failed to post {title}: {e}")

# ‚úÖ Main job: check upcoming movies
async def check_movies(app):
    today = datetime.utcnow().date()
    one_week_later = today + timedelta(days=7)

    url = f"{BASE_URL}/movie/upcoming?api_key={TMDB_API_KEY}&language=en-US&page=1&region=IN"
    try:
        resp = requests.get(url, timeout=10).json()
        movies = resp.get("results", [])
    except Exception as e:
        logger.error(f"‚ùå Error fetching upcoming movies: {e}")
        return

    logger.info(f"üîé Checking {len(movies)} upcoming movies...")

    for movie in movies:
        release_date = movie.get("release_date")
        if not release_date:
            continue

        try:
            release = datetime.strptime(release_date, "%Y-%m-%d").date()
        except:
            continue

        poster_url = get_poster_url(movie["id"])

        # 1 week before release
        if release == one_week_later:
            await send_movie_post(app, movie, poster_url, "‚è≥ Releasing in 1 Week")

        # Release today
        elif release == today:
            await send_movie_post(app, movie, poster_url, "üéâ Releasing Today")

        # First time discovery
        elif release > today:
            await send_movie_post(app, movie, poster_url, "üì¢ New Movie Added")

# ‚úÖ Scheduler setup
def schedule_autopost(app):
    scheduler = AsyncIOScheduler(timezone="UTC")
    scheduler.add_job(check_movies, "cron", hour=6, args=[app])  # daily 6 AM UTC
    scheduler.start()
    logger.info("‚úÖ Scheduler started (runs daily at 6 AM UTC)")

# ‚úÖ Manual test command
@Client.on_message(filters.command("autotest") & filters.user(Config.OWNER_ID))
async def autotest_command(client: Client, message: Message):
    await message.reply_text("üîé Testing AutoPost now...")

    try:
        url = f"{BASE_URL}/movie/upcoming?api_key={TMDB_API_KEY}&language=en-US&page=1&region=IN"
        resp = requests.get(url, timeout=10).json()
        movies = resp.get("results", [])

        if not movies:
            await message.reply_text("‚ùå No upcoming movies found.")
            return

        movie = movies[0]  # sirf first movie test ke liye
        poster_url = get_poster_url(movie["id"])

        await send_movie_post(client, movie, poster_url, "üì¢ Test AutoPost")
        await message.reply_text(f"‚úÖ Test movie posted: {movie.get('title')}")

        logger.info(f"‚úÖ /autotest posted: {movie.get('title')}")
    except Exception as e:
        await message.reply_text(f"‚ùå Error: {e}")
        logger.error(f"‚ùå /autotest failed: {e}")
