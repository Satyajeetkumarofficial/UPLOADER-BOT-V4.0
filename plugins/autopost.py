import requests
import logging
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pyrogram import Client
from plugins.config import Config

logger = logging.getLogger("plugins.autopost")
logger.setLevel(logging.INFO)

# ‚úÖ Helper: TMDB fetch with error handling
def tmdb_get(url):
    try:
        resp = requests.get(url, timeout=15)
        resp.raise_for_status()
        return resp.json()
    except Exception as e:
        logger.error(f"‚ùå TMDB API error: {e}")
        return None

# ‚úÖ Prepare movie details
def get_movie_details(movie_id):
    url = f"https://api.themoviedb.org/3/movie/{movie_id}?api_key={Config.TMDB_API_KEY}&language=en-US&append_to_response=credits"
    data = tmdb_get(url)
    if not data:
        return None

    title = data.get("title", "Unknown Title")
    overview = data.get("overview", "No description available.")
    release_date = data.get("release_date", "")
    year = release_date.split("-")[0] if release_date else "N/A"

    genres = ", ".join([g["name"] for g in data.get("genres", [])]) or "Unknown"
    languages = ", ".join([l["english_name"] for l in data.get("spoken_languages", [])]) or "Unknown"
    director = "Unknown"
    cast = []

    for crew in data.get("credits", {}).get("crew", []):
        if crew.get("job") == "Director":
            director = crew.get("name")
            break

    for actor in data.get("credits", {}).get("cast", [])[:5]:
        cast.append(actor.get("name"))

    cast_str = ", ".join(cast) if cast else "Unknown"

    return {
        "title": title,
        "overview": overview,
        "release_date": release_date,
        "year": year,
        "genres": genres,
        "languages": languages,
        "director": director,
        "cast": cast_str,
    }

# ‚úÖ Get poster/landscape
def get_movie_poster(movie_id):
    url = f"https://api.themoviedb.org/3/movie/{movie_id}/images?api_key={Config.TMDB_API_KEY}"
    data = tmdb_get(url)
    if not data:
        return None, []

    backdrops_hi = [b for b in data.get("backdrops", []) if b.get("iso_639_1") == "hi"]
    backdrops_en = [b for b in data.get("backdrops", []) if b.get("iso_639_1") == "en"]
    posters = data.get("posters", [])
    scenes = data.get("backdrops", [])

    links = []

    # Priority: Hindi ‚Üí English ‚Üí Posters ‚Üí Scenes
    if backdrops_hi:
        poster_url = f"https://image.tmdb.org/t/p/original{backdrops_hi[0]['file_path']}"
        links = [f"https://image.tmdb.org/t/p/original{b['file_path']}" for b in backdrops_hi[:10]]
    elif backdrops_en:
        poster_url = f"https://image.tmdb.org/t/p/original{backdrops_en[0]['file_path']}"
        links = [f"https://image.tmdb.org/t/p/original{b['file_path']}" for b in backdrops_en[:10]]
    elif posters:
        poster_url = f"https://image.tmdb.org/t/p/original{posters[0]['file_path']}"
        links = [f"https://image.tmdb.org/t/p/w500{p['file_path']}" for p in posters[:10]]
    elif scenes:
        poster_url = f"https://image.tmdb.org/t/p/original{scenes[0]['file_path']}"
        links = [f"https://image.tmdb.org/t/p/original{s['file_path']}" for s in scenes[:10]]
    else:
        return None, []

    return poster_url, links

# ‚úÖ Prepare message text
def make_caption(details, links, tag):
    caption = (
        f"üé¨ <b>{details['title']}</b> ({details['year']})\n\n"
        f"üìÖ Release Date: {details['release_date']}\n"
        f"üé≠ Genre: {details['genres']}\n"
        f"üåê Language: {details['languages']}\n"
        f"üé¨ Director: {details['director']}\n"
        f"‚≠ê Cast: {details['cast']}\n\n"
        f"üìñ Overview:\n{details['overview']}\n\n"
    )

    if links:
        caption += f"‚Ä¢ Posters/Images ({tag}):\n"
        for i, link in enumerate(links, 1):
            caption += f"{i}. <a href='{link}'>Click Here</a>\n"

    caption += "\nGenerated By : @UrlProUploaderBot"
    return caption

# ‚úÖ Post movies (1 week before, release day, first time seen)
async def check_and_post(bot: Client):
    logger.info("üîé Checking upcoming movies...")

    today = datetime.utcnow().date()
    url = f"https://api.themoviedb.org/3/movie/upcoming?api_key={Config.TMDB_API_KEY}&language=en-US&page=1"
    data = tmdb_get(url)
    if not data:
        return

    for movie in data.get("results", []):
        release_date = movie.get("release_date")
        if not release_date:
            continue

        try:
            rd = datetime.strptime(release_date, "%Y-%m-%d").date()
        except:
            continue

        movie_id = movie["id"]
        details = get_movie_details(movie_id)
        if not details:
            continue

        poster_url, links = get_movie_poster(movie_id)
        if not poster_url:
            logger.error(f"‚ùå No poster found for {details['title']}")
            continue

        caption = ""
        tag = ""
        if rd == today:
            tag = "üéâ Releasing Today!"
        elif rd == today + timedelta(days=7):
            tag = "‚è≥ Releasing in 1 Week!"
        elif (today - rd).days == 0:
            tag = "üì¢ New Upcoming Movie Added on TMDb"

        if tag:
            caption = make_caption(details, links, tag)
            try:
                await bot.send_photo(
                    chat_id=Config.FILE_CHANNEL,
                    photo=poster_url,
                    caption=caption,
                    parse_mode="HTML"
                )
                logger.info(f"‚úÖ Posted {details['title']} ({tag})")
            except Exception as e:
                logger.error(f"‚ùå Failed to send {details['title']}: {e}")

# ‚úÖ Scheduler setup
def schedule_autopost(bot: Client):
    scheduler = AsyncIOScheduler(timezone="UTC")
    scheduler.add_job(check_and_post, "cron", hour=6, minute=0, args=[bot])  # Daily at 6 AM UTC
    scheduler.start()
    logger.info("‚úÖ AutoPost Scheduler started (6 AM UTC)")
