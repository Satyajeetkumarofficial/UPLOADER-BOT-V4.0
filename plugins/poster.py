# plugins/poster.py

import requests
import logging
from io import BytesIO
from pyrogram import Client, filters, enums
from pyrogram.types import Message
from plugins.config import Config

# Logger setup
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

TMDB_API_KEY = Config.TMDB_API_KEY


@Client.on_message(filters.command("posterinfo") & filters.user(Config.OWNER_ID))
async def get_posters(bot: Client, message: Message):
    if len(message.command) < 2:
        await message.reply_text("‚ùå Usage: /posterinfo <movie name> [year]")
        return

    # Movie name + optional year
    if message.command[-1].isdigit() and len(message.command[-1]) == 4:
        movie_year = message.command[-1]
        movie_name = " ".join(message.command[1:-1])
    else:
        movie_year = None
        movie_name = " ".join(message.command[1:])

    logger.info(f"üîé Searching posters for: {movie_name} ({movie_year or 'N/A'})")

    # TMDb Search API
    search_url = f"https://api.themoviedb.org/3/search/movie?api_key={TMDB_API_KEY}&query={movie_name}"
    if movie_year:
        search_url += f"&year={movie_year}"

    try:
        resp = requests.get(search_url, timeout=10).json()
    except Exception as e:
        logger.error(f"‚ùå Error fetching TMDB search: {e}")
        await message.reply_text(f"‚ùå Error fetching TMDB search: {e}")
        return

    if not resp.get("results"):
        await message.reply_text(f"‚ùå Movie '{movie_name}' not found.")
        return

    movie = resp["results"][0]
    title = movie.get("title", movie_name)
    release_date = movie.get("release_date", "")
    year = release_date.split("-")[0] if release_date else movie_year or "N/A"
    movie_id = movie["id"]

    # TMDb Images API (English + others)
    images_url = f"https://api.themoviedb.org/3/movie/{movie_id}/images?api_key={TMDB_API_KEY}&include_image_language=en,null"
    try:
        images_resp = requests.get(images_url, timeout=10).json()
    except Exception as e:
        await message.reply_text(f"‚ùå Error fetching TMDB images: {e}")
        return

    backdrops = images_resp.get("backdrops", [])
    posters = images_resp.get("posters", [])

    # Filter: English Landscape (>=1280 width)
    landscapes = [b for b in backdrops if b.get("width", 0) >= 1200 and b.get("iso_639_1") == "en"][:5]
    # Portrait Posters
    portrait_posters = posters[:5]
    # Scene Clips (other backdrops)
    scene_clips = [b for b in backdrops if b.get("iso_639_1") != "en"][:10]

    logger.info(f"‚úÖ Found {len(landscapes)} landscapes, {len(portrait_posters)} posters, {len(scene_clips)} scenes")

    # Upload first landscape if available
    photo_bytes = None
    if landscapes:
        first_landscape_url = f"https://image.tmdb.org/t/p/original{landscapes[0]['file_path']}"
        try:
            resp_img = requests.get(first_landscape_url, timeout=10)
            if resp_img.status_code == 200:
                photo_bytes = BytesIO(resp_img.content)
                photo_bytes.name = "poster.jpg"
                photo_bytes.seek(0)
        except Exception as e:
            logger.error(f"‚ùå Error fetching first landscape: {e}")

    # Build caption with HTML links
    caption_text = f"üé¨ Movie: <b>{title}</b> ({year})\n\n"

    if landscapes:
        caption_text += "‚Ä¢ English Landscape Posters:\n"
        for i, b in enumerate(landscapes, 1):
            link = f"https://image.tmdb.org/t/p/original{b['file_path']}"
            caption_text += f"{i}. <a href='{link}'>Click Here</a>\n"

    if portrait_posters:
        caption_text += "\n‚Ä¢ Portrait Posters:\n"
        for i, p in enumerate(portrait_posters, 1):
            link = f"https://image.tmdb.org/t/p/w500{p['file_path']}"
            caption_text += f"{i}. <a href='{link}'>Click Here</a>\n"

    if scene_clips:
        caption_text += "\n‚Ä¢ Scene Clips:\n"
        for i, s in enumerate(scene_clips, 1):
            link = f"https://image.tmdb.org/t/p/original{s['file_path']}"
            caption_text += f"{i}. <a href='{link}'>Click Here</a>\n"

    caption_text += "\nGenerated By : @UrlProUploaderBot"

    # Send reply with correct parse_mode
    try:
        if photo_bytes:
            await message.reply_photo(
                photo=photo_bytes,
                caption=caption_text,
                parse_mode=enums.ParseMode.HTML
            )
        else:
            await message.reply_text(
                caption_text,
                parse_mode=enums.ParseMode.HTML
            )
    except Exception as e:
        logger.error(f"‚ùå Failed to send reply: {e}")
        await message.reply_text("‚ùå Failed to send poster info.")

    logger.info(f"‚úÖ Poster info sent for '{title}' ({year}) to user {message.from_user.id}")
