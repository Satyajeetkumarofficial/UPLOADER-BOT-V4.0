from pyrogram import Client, filters
from pyrogram.types import Message
import requests
from io import BytesIO
from plugins.config import Config


@Client.on_message(filters.command("posterinfo") & filters.user(Config.OWNER_ID))
async def poster_info_command(bot: Client, message: Message):
    if len(message.command) < 2:
        await message.reply_text("‚ùå Usage: /posterinfo <movie name> [year]")
        return

    # Movie name + optional year
    if message.command[-1].isdigit() and len(message.command[-1]) == 4:
        movie_year = message.command[-1]
        movie_name = " ".join(message.command[1:-1])
    else:
        movie_year = None
        movie_name = " ".join(message.command[1:])

    # Search movie
    search_url = f"https://api.themoviedb.org/3/search/movie?api_key={Config.TMDB_API_KEY}&query={movie_name}"
    if movie_year:
        search_url += f"&year={movie_year}"

    resp = requests.get(search_url, timeout=10).json()
    if not resp.get("results"):
        await message.reply_text(f"‚ùå Movie '{movie_name}' not found.")
        return

    movie = resp["results"][0]
    title = movie.get("title", movie_name)
    release_date = movie.get("release_date", "")
    year = release_date.split("-")[0] if release_date else movie_year
    movie_id = movie["id"]

    # Get images (English filtered)
    images_url = f"https://api.themoviedb.org/3/movie/{movie_id}/images?api_key={Config.TMDB_API_KEY}&include_image_language=en"
    images_resp = requests.get(images_url, timeout=10).json()

    # Scene Clips (backdrops, upto 10)
    scene_clips = images_resp.get("backdrops", [])[:10]

    # English Landscape Posters (upto 5)
    english_landscape = [
        b for b in images_resp.get("backdrops", []) if b.get("iso_639_1") == "en"
    ][:5]

    # Portrait Posters (upto 5)
    portrait_posters = [
        p for p in images_resp.get("posters", []) if p.get("iso_639_1") == "en"
    ][:5]

    # Upload first English Landscape Poster
    photo_bytes = None
    if english_landscape:
        first_landscape_url = f"https://image.tmdb.org/t/p/original{english_landscape[0]['file_path']}"
        img = requests.get(first_landscape_url, timeout=10)
        if img.status_code == 200:
            photo_bytes = BytesIO(img.content)
            photo_bytes.name = "poster.jpg"
            photo_bytes.seek(0)

    # Prepare caption with Click Here links
    caption_text = f"üé¨ Movie: {title} ({year})\n\n"

    if english_landscape:
        caption_text += "‚Ä¢ English Landscape Posters:\n"
        for i, b in enumerate(english_landscape, 1):
            link = f"https://image.tmdb.org/t/p/original{b['file_path']}"
            caption_text += f"{i}. [Click Here]({link})\n"

    if portrait_posters:
        caption_text += "\n‚Ä¢ Portrait Posters:\n"
        for i, p in enumerate(portrait_posters, 1):
            link = f"https://image.tmdb.org/t/p/w500{p['file_path']}"
            caption_text += f"{i}. [Click Here]({link})\n"

    if scene_clips:
        caption_text += "\n‚Ä¢ Scene Clips:\n"
        for i, b in enumerate(scene_clips, 1):
            link = f"https://image.tmdb.org/t/p/original{b['file_path']}"
            caption_text += f"{i}. [Click Here]({link})\n"

    caption_text += "\nGenerated By : @UrlProUploaderBot"

    # Send
    if photo_bytes:
        await message.reply_photo(photo=photo_bytes, caption=caption_text, parse_mode="Markdown")
    else:
        await message.reply_text(caption_text, parse_mode="Markdown")
