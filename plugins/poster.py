from pyrogram import Client, filters, enums
from pyrogram.types import Message
import requests
from io import BytesIO
from plugins.config import Config
import re

# Escape text for MarkdownV2
def escape_md(text: str) -> str:
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

@Client.on_message(filters.command("posterinfo") & filters.user(Config.OWNER_ID))
async def poster_info_command(bot: Client, message: Message):
    if len(message.command) < 2:
        await message.reply_text("‚ùå Usage: /posterinfo <movie name> [year]")
        return

    # Movie name + optional year
    if message.command[-1].isdigit() and len(message.command[-1]) == 4:
        movie_year = message.command[-1]
        movie_name = " ".join(message.command[1:-1])
    else:
        movie_year = None
        movie_name = " ".join(message.command[1:])

    await message.reply_text(f"üîé Searching poster for: {movie_name}" + (f" ({movie_year})" if movie_year else ""))

    # TMDb Search API
    search_url = f"https://api.themoviedb.org/3/search/movie?api_key={Config.TMDB_API_KEY}&query={movie_name}"
    if movie_year:
        search_url += f"&year={movie_year}"

    try:
        resp = requests.get(search_url, timeout=10).json()
    except Exception as e:
        await message.reply_text(f"‚ùå Error fetching data: {e}")
        return

    if not resp.get("results"):
        await message.reply_text(f"‚ùå Movie '{movie_name}' not found.")
        return

    movie = resp["results"][0]
    title = movie.get("title", movie_name)
    release_date = movie.get("release_date", "")
    year = release_date.split("-")[0] if release_date else movie_year

    poster_landscape = f"https://image.tmdb.org/t/p/original{movie.get('poster_path')}" if movie.get('poster_path') else None
    poster_portrait = f"https://image.tmdb.org/t/p/w500{movie.get('poster_path')}" if movie.get('poster_path') else None

    if not poster_landscape:
        await message.reply_text(f"‚ùå Poster not available for '{title}'.")
        return

    # Fetch poster photo
    try:
        resp_img = requests.get(poster_landscape, timeout=10)
        if resp_img.status_code == 200:
            image_bytes = BytesIO(resp_img.content)
            image_bytes.name = "poster.jpg"
            image_bytes.seek(0)

            # MarkdownV2 safe caption
            caption_text = f"""üé¨ Movie: {escape_md(title)} ({year})

‚Ä¢ English Landscape:
1. [Click Here]({poster_landscape})

‚Ä¢ Portrait Posters:
1. [Click Here]({poster_portrait if poster_portrait else poster_landscape})

Generated By : @UrlProUploaderBot
"""
            await message.reply_photo(
                photo=image_bytes,
                caption=caption_text,
                parse_mode=enums.ParseMode.MARKDOWN_V2
            )
        else:
            await message.reply_text("‚ùå Failed to fetch poster image.")
    except Exception as e:
        await message.reply_text(f"‚ùå Error: {e}")
