from pyrogram import Client, filters
from pyrogram.types import Message
import requests
from io import BytesIO
from plugins.config import Config

@Client.on_message(filters.command("posterinfo") & filters.user(Config.OWNER_ID))
async def poster_info_command(bot: Client, message: Message):
    if len(message.command) < 2:
        print("‚ùå Usage error: /posterinfo <movie name> [year]")
        await message.reply_text("‚ùå Usage: /posterinfo <movie name> [year]")
        return

    # Movie name + optional year
    if message.command[-1].isdigit() and len(message.command[-1]) == 4:
        movie_year = message.command[-1]
        movie_name = " ".join(message.command[1:-1])
    else:
        movie_year = None
        movie_name = " ".join(message.command[1:])

    print(f"üîé Searching poster for: {movie_name}" + (f" ({movie_year})" if movie_year else ""))

    # TMDb Search API
    search_url = f"https://api.themoviedb.org/3/search/movie?api_key={Config.TMDB_API_KEY}&query={movie_name}"
    if movie_year:
        search_url += f"&year={movie_year}"

    try:
        resp = requests.get(search_url, timeout=10).json()
    except Exception as e:
        print(f"‚ùå Error fetching data: {e}")
        await message.reply_text(f"‚ùå Error fetching data: {e}")
        return

    if not resp.get("results"):
        print(f"‚ùå Movie '{movie_name}' not found.")
        await message.reply_text(f"‚ùå Movie '{movie_name}' not found.")
        return

    movie = resp["results"][0]
    title = movie.get("title", movie_name)
    release_date = movie.get("release_date", "")
    year = release_date.split("-")[0] if release_date else movie_year

    # TMDb movie images API
    movie_id = movie["id"]
    images_url = f"https://api.themoviedb.org/3/movie/{movie_id}/images?api_key={Config.TMDB_API_KEY}"
    try:
        images_resp = requests.get(images_url, timeout=10).json()
    except Exception as e:
        print(f"‚ùå Error fetching images: {e}")
        await message.reply_text(f"‚ùå Error fetching images: {e}")
        return

    backdrops = images_resp.get("backdrops", [])
    posters = images_resp.get("posters", [])

    if not backdrops and not posters:
        print(f"‚ùå No images found for '{title}'")
        await message.reply_text(f"‚ùå No images found for '{title}'")
        return

    # First landscape for Telegram upload
    first_landscape_url = f"https://image.tmdb.org/t/p/original{backdrops[0]['file_path']}" if backdrops else None

    # Fetch photo bytes
    if first_landscape_url:
        resp_img = requests.get(first_landscape_url, timeout=10)
        if resp_img.status_code == 200:
            photo_bytes = BytesIO(resp_img.content)
            photo_bytes.name = "poster.jpg"
            photo_bytes.seek(0)
        else:
            first_landscape_url = None
            photo_bytes = None
    else:
        photo_bytes = None

    # Prepare links caption
    landscape_links = [f"https://image.tmdb.org/t/p/original{b['file_path']}" for b in backdrops[:5]]  # first 5
    poster_links = [f"https://image.tmdb.org/t/p/w500{p['file_path']}" for p in posters[:5]]  # first 5

    caption_text = f"üé¨ Movie: <b>{title}</b> ({year})\n\n"
    if landscape_links:
        caption_text += "‚Ä¢ English Landscape:\n"
        for i, link in enumerate(landscape_links, 1):
            caption_text += f"{i}. <a href='{link}'>Click Here</a>\n"
    if poster_links:
        caption_text += "\n‚Ä¢ Portrait Posters:\n"
        for i, link in enumerate(poster_links, 1):
            caption_text += f"{i}. <a href='{link}'>Click Here</a>\n"

    caption_text += "\nGenerated By : @UrlProUploaderBot"

    # Send photo
    if photo_bytes:
        await message.reply_photo(photo=photo_bytes, caption=caption_text, parse_mode="html")
    else:
        await message.reply_text("‚ùå Failed to fetch first landscape photo.")

    # Koyeb log
    print(f"‚úÖ Poster info sent for '{title}' ({year}) to user {message.from_user.id}")
